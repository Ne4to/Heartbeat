@page "/object-instances"
@using Heartbeat.Runtime.Extensions
@inject RuntimeContext Context


<PageTitle>Object Instances</PageTitle>

<p>
    @MethodTable @ClrType?.Name
</p>

<RadzenDataGrid TItem="ObjectInstance"
                AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
                PageSize="12" AllowPaging="true"
                Data="@Instances">
    <Columns>
        <RadzenDataGridColumn TItem="ObjectInstance" Property="Address" Title="Address" Width="100px">
            @*          <Template Context="s">
            <a href="/object-instances?mt=@s.MethodTable.Value.ToString("x")">@s.InstanceCount</a>
            </Template>*@
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ObjectInstance" Property="Size" Title="Size" TextAlign="TextAlign.Right" Width="140px">
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "mt")]
    public string MethodTableParameter { get; set; }

    public MethodTable? MethodTable { get; private set; }
    public ClrType? ClrType { get; private set; }

    public IReadOnlyCollection<ObjectInstance> Instances { get; private set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var mt = new MethodTable(ulong.Parse(MethodTableParameter, System.Globalization.NumberStyles.HexNumber));
        MethodTable = mt;
        ClrType = Context.Heap.FindTypeByMethodTable(mt);

        Instances = (
            from obj in Context.EnumerateObjects(TraversingHeapModes.All)
            where obj.Type != null
            && obj.Type.MethodTable == mt
            orderby obj.Size descending
            select new ObjectInstance
             (
                new Address(obj.Address),
                new Size(obj.Size)
                )
        ).ToArray();
    }

    public record ObjectInstance(Address Address, Size Size);
}
