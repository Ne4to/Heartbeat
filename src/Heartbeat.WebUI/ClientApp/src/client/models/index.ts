/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ClrObjectField extends Parsable {
    /**
     * The isValueType property
     */
    isValueType?: boolean;
    /**
     * The methodTable property
     */
    methodTable?: number;
    /**
     * The name property
     */
    name?: string;
    /**
     * The objectAddress property
     */
    objectAddress?: number;
    /**
     * The offset property
     */
    offset?: number;
    /**
     * The typeName property
     */
    typeName?: string;
    /**
     * The value property
     */
    value?: string;
}
export function createClrObjectFieldFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoClrObjectField;
}
export function createGetClrObjectResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetClrObjectResult;
}
export function createGetObjectInstancesResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGetObjectInstancesResult;
}
export function createModuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoModule;
}
export function createObjectInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoObjectInstance;
}
export function createObjectTypeStatisticsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoObjectTypeStatistics;
}
export function createProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProblemDetails;
}
export function deserializeIntoClrObjectField(clrObjectField: ClrObjectField | undefined = {} as ClrObjectField) : Record<string, (node: ParseNode) => void> {
    return {
        "isValueType": n => { clrObjectField.isValueType = n.getBooleanValue(); },
        "methodTable": n => { clrObjectField.methodTable = n.getNumberValue(); },
        "name": n => { clrObjectField.name = n.getStringValue(); },
        "objectAddress": n => { clrObjectField.objectAddress = n.getNumberValue(); },
        "offset": n => { clrObjectField.offset = n.getNumberValue(); },
        "typeName": n => { clrObjectField.typeName = n.getStringValue(); },
        "value": n => { clrObjectField.value = n.getStringValue(); },
    }
}
export function deserializeIntoGetClrObjectResult(getClrObjectResult: GetClrObjectResult | undefined = {} as GetClrObjectResult) : Record<string, (node: ParseNode) => void> {
    return {
        "fields": n => { getClrObjectResult.fields = n.getCollectionOfObjectValues<ClrObjectField>(createClrObjectFieldFromDiscriminatorValue); },
        "methodTable": n => { getClrObjectResult.methodTable = n.getNumberValue(); },
        "moduleName": n => { getClrObjectResult.moduleName = n.getStringValue(); },
        "size": n => { getClrObjectResult.size = n.getNumberValue(); },
        "typeName": n => { getClrObjectResult.typeName = n.getStringValue(); },
    }
}
export function deserializeIntoGetObjectInstancesResult(getObjectInstancesResult: GetObjectInstancesResult | undefined = {} as GetObjectInstancesResult) : Record<string, (node: ParseNode) => void> {
    return {
        "instances": n => { getObjectInstancesResult.instances = n.getCollectionOfObjectValues<ObjectInstance>(createObjectInstanceFromDiscriminatorValue); },
        "methodTable": n => { getObjectInstancesResult.methodTable = n.getNumberValue(); },
        "typeName": n => { getObjectInstancesResult.typeName = n.getStringValue(); },
    }
}
export function deserializeIntoModule(module: Module | undefined = {} as Module) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { module.address = n.getNumberValue(); },
        "name": n => { module.name = n.getStringValue(); },
        "size": n => { module.size = n.getNumberValue(); },
    }
}
export function deserializeIntoObjectInstance(objectInstance: ObjectInstance | undefined = {} as ObjectInstance) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { objectInstance.address = n.getNumberValue(); },
        "size": n => { objectInstance.size = n.getNumberValue(); },
    }
}
export function deserializeIntoObjectTypeStatistics(objectTypeStatistics: ObjectTypeStatistics | undefined = {} as ObjectTypeStatistics) : Record<string, (node: ParseNode) => void> {
    return {
        "instanceCount": n => { objectTypeStatistics.instanceCount = n.getNumberValue(); },
        "methodTable": n => { objectTypeStatistics.methodTable = n.getNumberValue(); },
        "totalSize": n => { objectTypeStatistics.totalSize = n.getNumberValue(); },
        "typeName": n => { objectTypeStatistics.typeName = n.getStringValue(); },
    }
}
export function deserializeIntoProblemDetails(problemDetails: ProblemDetails | undefined = {} as ProblemDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { problemDetails.detail = n.getStringValue(); },
        "instance": n => { problemDetails.instance = n.getStringValue(); },
        "status": n => { problemDetails.status = n.getNumberValue(); },
        "title": n => { problemDetails.title = n.getStringValue(); },
        "type": n => { problemDetails.type = n.getStringValue(); },
    }
}
export interface GetClrObjectResult extends Parsable {
    /**
     * The fields property
     */
    fields?: ClrObjectField[];
    /**
     * The methodTable property
     */
    methodTable?: number;
    /**
     * The moduleName property
     */
    moduleName?: string;
    /**
     * The size property
     */
    size?: number;
    /**
     * The typeName property
     */
    typeName?: string;
}
export interface GetObjectInstancesResult extends Parsable {
    /**
     * The instances property
     */
    instances?: ObjectInstance[];
    /**
     * The methodTable property
     */
    methodTable?: number;
    /**
     * The typeName property
     */
    typeName?: string;
}
export interface Module extends Parsable {
    /**
     * The address property
     */
    address?: number;
    /**
     * The name property
     */
    name?: string;
    /**
     * The size property
     */
    size?: number;
}
export interface ObjectInstance extends Parsable {
    /**
     * The address property
     */
    address?: number;
    /**
     * The size property
     */
    size?: number;
}
export interface ObjectTypeStatistics extends Parsable {
    /**
     * The instanceCount property
     */
    instanceCount?: number;
    /**
     * The methodTable property
     */
    methodTable?: number;
    /**
     * The totalSize property
     */
    totalSize?: number;
    /**
     * The typeName property
     */
    typeName?: string;
}
export interface ProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string;
    /**
     * The instance property
     */
    instance?: string;
    /**
     * The status property
     */
    status?: number;
    /**
     * The title property
     */
    title?: string;
    /**
     * The type property
     */
    type?: string;
}
export function serializeClrObjectField(writer: SerializationWriter, clrObjectField: ClrObjectField | undefined = {} as ClrObjectField) : void {
    writer.writeBooleanValue("isValueType", clrObjectField.isValueType);
    writer.writeNumberValue("methodTable", clrObjectField.methodTable);
    writer.writeStringValue("name", clrObjectField.name);
    writer.writeNumberValue("objectAddress", clrObjectField.objectAddress);
    writer.writeNumberValue("offset", clrObjectField.offset);
    writer.writeStringValue("typeName", clrObjectField.typeName);
    writer.writeStringValue("value", clrObjectField.value);
}
export function serializeGetClrObjectResult(writer: SerializationWriter, getClrObjectResult: GetClrObjectResult | undefined = {} as GetClrObjectResult) : void {
    writer.writeCollectionOfObjectValues<ClrObjectField>("fields", getClrObjectResult.fields, serializeClrObjectField);
    writer.writeNumberValue("methodTable", getClrObjectResult.methodTable);
    writer.writeStringValue("moduleName", getClrObjectResult.moduleName);
    writer.writeNumberValue("size", getClrObjectResult.size);
    writer.writeStringValue("typeName", getClrObjectResult.typeName);
}
export function serializeGetObjectInstancesResult(writer: SerializationWriter, getObjectInstancesResult: GetObjectInstancesResult | undefined = {} as GetObjectInstancesResult) : void {
    writer.writeCollectionOfObjectValues<ObjectInstance>("instances", getObjectInstancesResult.instances, serializeObjectInstance);
    writer.writeNumberValue("methodTable", getObjectInstancesResult.methodTable);
    writer.writeStringValue("typeName", getObjectInstancesResult.typeName);
}
export function serializeModule(writer: SerializationWriter, module: Module | undefined = {} as Module) : void {
    writer.writeNumberValue("address", module.address);
    writer.writeStringValue("name", module.name);
    writer.writeNumberValue("size", module.size);
}
export function serializeObjectInstance(writer: SerializationWriter, objectInstance: ObjectInstance | undefined = {} as ObjectInstance) : void {
    writer.writeNumberValue("address", objectInstance.address);
    writer.writeNumberValue("size", objectInstance.size);
}
export function serializeObjectTypeStatistics(writer: SerializationWriter, objectTypeStatistics: ObjectTypeStatistics | undefined = {} as ObjectTypeStatistics) : void {
    writer.writeNumberValue("instanceCount", objectTypeStatistics.instanceCount);
    writer.writeNumberValue("methodTable", objectTypeStatistics.methodTable);
    writer.writeNumberValue("totalSize", objectTypeStatistics.totalSize);
    writer.writeStringValue("typeName", objectTypeStatistics.typeName);
}
export function serializeProblemDetails(writer: SerializationWriter, problemDetails: ProblemDetails | undefined = {} as ProblemDetails) : void {
    writer.writeStringValue("detail", problemDetails.detail);
    writer.writeStringValue("instance", problemDetails.instance);
    writer.writeNumberValue("status", problemDetails.status);
    writer.writeStringValue("title", problemDetails.title);
    writer.writeStringValue("type", problemDetails.type);
    writer.writeAdditionalData(problemDetails.additionalData);
}
export type TraversingHeapModes = (typeof TraversingHeapModesObject)[keyof typeof TraversingHeapModesObject];
export const TraversingHeapModesObject = {
    Live: "Live",
    Dead: "Dead",
    All: "All",
}  as const;
/* tslint:enable */
/* eslint-enable */
